import { useState, useEffect, useRef } from "react";
import { Send, Bot, User, Sparkles } from "lucide-react";
import { Card } from "./ui/card";
import { Button } from "./ui/button";
import { Input } from "./ui/input";

interface Message {
  id: number;
  text: string;
  isAI: boolean;
  timestamp: Date;
  typing?: boolean;
}

export function AIChat() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      text: "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! –ë–∏ —Ç–∞–Ω—ã AI –±–∞–≥—à. –¢–∞–Ω–¥ —Ö—ç—Ä—Ö—ç–Ω —Ç—É—Å–∞–ª–∂ —á–∞–¥–∞—Ö –≤—ç? –ú–∞—Ç–µ–º–∞—Ç–∏–∫, —Ñ–∏–∑–∏–∫, —Ö–∏–º–∏ —ç—Å–≤—ç–ª –±—É—Å–∞–¥ —Ö–∏—á—ç—ç–ª–∏–π–Ω —Ç–∞–ª–∞–∞—Ä –∞—Å—É—É–≥–∞–∞—Ä–∞–π! üòä",
      isAI: true,
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const aiResponses = [
    "–°–∞–π–Ω –∞—Å—É—É–ª—Ç! –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∏–π–Ω —Ç—É—Ö–∞–π–¥ –±–∏ —Ç–∞–Ω–¥ –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ç–∞–π–ª–±–∞—Ä–ª–∞–∂ —á–∞–¥–Ω–∞. –Ø–º–∞—Ä –±–æ–¥–ª–æ–≥—ã–≥ —à–∏–π–¥—ç—Ö—ç–¥ —Ç—É—Å–ª–∞–º–∂ —Ö—ç—Ä—ç–≥—Ç—ç–π –≤—ç?",
    "–§–∏–∑–∏–∫–∏–π–Ω —Ö—É—É–ª—å —Ç–æ–≥—Ç–æ–ª—É—É–¥—ã–≥ –æ–π–ª–≥–æ—Ö–æ–¥ –±–∏ —Ç–∞–Ω–¥ —Ç—É—Å–ª–∞–Ω–∞! –ñ–∏—à—ç—ç –±–æ–¥–ª–æ–≥–æ —Ö–∏–π–∂ “Ø–∑—ç—Ö–∏–π–≥ —Ö“Ø—Å—á –±–∞–π–Ω–∞ —É—É?",
    "–•–∏–º–∏–π–Ω –Ω—ç–≥–¥–ª“Ø“Ø–¥–∏–π–Ω —Ç–∞–ª–∞–∞—Ä –∞—Å—É—É—Å–∞–Ω–¥ –±–∞—è—Ä—Ç–∞–π –±–∞–π–Ω–∞. –Ø–º–∞—Ä –Ω—ç–≥–¥–ª–∏–π–Ω —Ç–∞–ª–∞–∞—Ä –º—ç–¥—ç—Ö–∏–π–≥ —Ö“Ø—Å—á –±–∞–π–Ω–∞ –≤—ç?",
    "–¢–∞ –º–∞—à —Å–∞–π–Ω —Å—É—Ä—á –±–∞–π–Ω–∞! –ë–∏ —Ç–∞–Ω–∞–π –∞—Ö–∏—Ü—ã–≥ —Ö–∞—Ä–∂ –±–∞–π–≥–∞–∞–¥ –±–∞—è—Ä—Ç–∞–π –±–∞–π–Ω–∞. –î–∞—Ä–∞–∞–≥–∏–π–Ω –∞—Å—É—É–ª—Ç—ã–≥ –∞—Å—É—É–≥–∞–∞—Ä–∞–π!",
    "–≠–Ω—ç —Å—ç–¥–≤–∏–π–≥ –æ–π–ª–≥–æ—Ö–æ–¥ —Ö—ç—Ü“Ø“Ø –±–∞–π–∂ –º–∞–≥–∞–¥–≥“Ø–π. –ë–∏ —Ç–∞–Ω–¥ –∞–ª—Ö–∞–º –∞–ª—Ö–º–∞–∞—Ä —Ç–∞–π–ª–±–∞—Ä–ª–∞—è. –Æ—É–Ω–∞–∞—Å —ç—Ö—ç–ª—å–µ?",
    "–¢–∞–Ω–∞–π —Å–æ–Ω–∏—Ä—Ö–æ–ª –Ω–∞–¥–∞–¥ —Ç–∞–∞–ª–∞–≥–¥–∞–∂ –±–∞–π–Ω–∞! –≠–Ω—ç –º—ç–¥–ª—ç–≥–∏–π–≥ –±–æ–¥–ª–æ–≥–æ –±–æ–¥–æ—Ö–æ–¥ —Ö—ç—Ä—ç–≥–ª—ç–∂ “Ø–∑—å–µ!",
    "–°–∞–π–Ω! –≠–Ω—ç –∞—Å—É—É–¥–ª—ã–≥ —à–∏–π–¥—ç—Ö—ç–¥ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏–π–Ω –∞–ª—å –∞—Ä–≥—ã–≥ –∞—à–∏–≥–ª–∞—Ö—ã–≥ —Å–∞–Ω–∞–ª –±–æ–ª–≥–æ–∂ –±–∞–π–Ω–∞?",
    "–¢–∞ —à–∏–Ω—ç –∑“Ø–π–ª —Å—É—Ä–∞—Ö—ã–≥ —Ö“Ø—Å—ç–∂ –±–∞–π–≥–∞–∞ –Ω—å —Å–∞–π—Ö–∞–Ω —Ö–∞—Ä–∞–≥–¥–∞–∂ –±–∞–π–Ω–∞. –ë–∏ —Ç–∞–Ω–¥ –¥—ç–º–∂–ª—ç–≥ “Ø–∑“Ø“Ø–ª—ç—Ö—ç–¥ –±—ç–ª—ç–Ω –±–∞–π–Ω–∞!"
  ];

  const handleSendMessage = async () => {
    if (inputText.trim() === "") return;

    const userMessage: Message = {
      id: Date.now(),
      text: inputText,
      isAI: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText("");
    setIsTyping(true);

    // Simulate AI typing delay
    setTimeout(() => {
      const randomResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)];
      const aiMessage: Message = {
        id: Date.now() + 1,
        text: randomResponse,
        isAI: true,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);
    }, 1500 + Math.random() * 1000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('mn-MN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className="p-6 max-w-4xl mx-auto h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">AI –ë–∞–≥—à</h1>
        <p className="text-muted-foreground">–£—Ö–∞–∞–ª–∞–≥ —Ç—É—Å–ª–∞—Ö —Ç–∞–Ω—ã —Ö–∞–∂—É—É–¥</p>
      </div>

      {/* Chat Container */}
      <Card className="flex-1 flex flex-col glass-morphism overflow-hidden">
        {/* AI Status */}
        <div className="p-4 border-b border-border bg-gradient-to-r from-primary/10 to-primary/5">
          <div className="flex items-center gap-3">
            <div className="relative">
              <div className="w-10 h-10 rounded-full bg-primary flex items-center justify-center pulse-soft">
                <Bot className="w-5 h-5 text-primary-foreground" />
              </div>
              <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-card animate-pulse"></div>
            </div>
            <div>
              <h3 className="font-semibold text-primary">AI –ë–∞–≥—à</h3>
              <div className="text-sm text-muted-foreground flex items-center gap-1">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                –û–Ω–ª–∞–π–Ω ¬∑ –¢–∞–Ω–¥ —Ç—É—Å–∞–ª–∞—Ö–∞–¥ –±—ç–ª—ç–Ω
              </div>
            </div>
            <div className="ml-auto">
              <Sparkles className="w-5 h-5 text-primary animate-pulse" />
            </div>
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <div 
              key={message.id}
              className={`flex gap-3 ${message.isAI ? 'justify-start' : 'justify-end'}`}
            >
              {message.isAI && (
                <div className="w-8 h-8 rounded-full bg-primary flex items-center justify-center flex-shrink-0 mt-1">
                  <Bot className="w-4 h-4 text-primary-foreground" />
                </div>
              )}
              
              <div className={`max-w-[70%] ${message.isAI ? 'order-1' : 'order-0'}`}>
                <div className={`p-4 rounded-2xl ${
                  message.isAI 
                    ? 'bg-card border border-primary/20 glow-effect' 
                    : 'bg-primary text-primary-foreground ml-auto'
                } ${message.isAI ? 'rounded-tl-sm' : 'rounded-tr-sm'}`}>
                  <p className="whitespace-pre-wrap">{message.text}</p>
                </div>
                <p className={`text-xs text-muted-foreground mt-1 ${
                  message.isAI ? 'text-left' : 'text-right'
                }`}>
                  {formatTime(message.timestamp)}
                </p>
              </div>
              
              {!message.isAI && (
                <div className="w-8 h-8 rounded-full bg-secondary flex items-center justify-center flex-shrink-0 mt-1">
                  <User className="w-4 h-4 text-secondary-foreground" />
                </div>
              )}
            </div>
          ))}

          {/* Typing Indicator */}
          {isTyping && (
            <div className="flex gap-3 justify-start">
              <div className="w-8 h-8 rounded-full bg-primary flex items-center justify-center flex-shrink-0 mt-1 pulse-soft">
                <Bot className="w-4 h-4 text-primary-foreground" />
              </div>
              <div className="bg-card border border-primary/20 p-4 rounded-2xl rounded-tl-sm glow-effect">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* Input */}
        <div className="p-4 border-t border-border bg-card/50">
          <div className="flex gap-3">
            <Input
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="AI –±–∞–≥—à—Ç–∞–∞ –∞—Å—É—É–ª—Ç –∞—Å—É—É–≥–∞–∞—Ä–∞–π..."
              className="flex-1 bg-background border-border focus:border-primary focus:ring-primary"
              disabled={isTyping}
            />
            <Button 
              onClick={handleSendMessage}
              disabled={inputText.trim() === "" || isTyping}
              className="glow-effect"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
          <div className="flex items-center justify-between mt-3">
            <p className="text-xs text-muted-foreground">
              AI –±–∞–≥—à 24/7 —Ç–∞–Ω–¥ —Ç—É—Å–∞–ª–∞—Ö–∞–¥ –±—ç–ª—ç–Ω –±–∞–π–Ω–∞
            </p>
            <div className="flex items-center gap-1 text-xs text-muted-foreground">
              <Sparkles className="w-3 h-3" />
              <span>Powered by AI</span>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
}